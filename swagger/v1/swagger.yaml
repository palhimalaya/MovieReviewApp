---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/movies":
    get:
      summary: Get a list of movies
      tags:
      - Movies
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    movies:
                    - id: 1
                      title: Movie Title
                      description: Movie Description
                      release_date: '2023-07-31'
                      duration: 120
                      cover_img: https://example.com/cover_img.jpg
    post:
      summary: Create a new movie
      tags:
      - Movies
      parameters: []
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              examples:
                example_0:
                  value:
                    movie:
                      id: 1
                      title: Movie Title
                      description: Movie Description
                      release_date: '2023-07-31'
                      duration: 120
                      cover_img: https://example.com/cover_img.jpg
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 422
                      message: Invalid Movie
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                release_date:
                  type: string
                  format: date
                duration:
                  type: integer
                cover_img:
                  type: string
                  format: binary
              required:
              - title
              - release_date
              - duration
              - cover_img
  "/api/v1/movies/{id}":
    get:
      summary: Get a movie by id
      tags:
      - Movies
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: successful
          content:
            application/json:
              examples:
                example_0:
                  value:
                    movie:
                      id: 1
                      title: Movie Title
                      description: Movie Description
                      release_date: '2023-07-31'
                      duration: 120
                      cover_img: https://example.com/cover_img.jpg
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 404
                      message: Movie not found
    patch:
      summary: Update a movie
      tags:
      - Movies
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              examples:
                example_0:
                  value:
                    movie:
                      id: 1
                      title: Movie Title
                      description: Movie Description
                      release_date: '2023-07-31'
                      duration: 120
                      cover_img: https://example.com/cover_img.jpg
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 404
                      message: Movie not found
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 422
                      message: Invalid Movie
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                release_date:
                  type: string
                  format: date
                duration:
                  type: integer
                cover_img:
                  type: string
                  format: binary
              required:
              - title
              - release_date
              - duration
              - cover_img
    delete:
      summary: Delete a movie
      tags:
      - Movies
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 200
                      message: Movie deleted successfully
        '404':
          description: Not Found
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 404
                      message: Movie not found
  "/api/v1/movies/{movie_id}/":
    parameters:
    - name: movie_id
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Get all reviews for a specific movie
      tags:
      - Reviews
      responses:
        '200':
          description: Reviews found
        '404':
          description: Movie not found
  "/api/v1/movies/{movie_id}/reviews":
    parameters:
    - name: movie_id
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Create a new review
      tags:
      - Reviews
      parameters: []
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              examples:
                example_0:
                  value:
                    id: 3
                    rating: 4
                    review: Enjoyed the movie!
                    created_at: '2023-07-18T12:45:00Z'
                    updated_at: '2023-07-18T12:45:00Z'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 422
                      message: Invalid Review
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                review:
                  type: object
                  properties:
                    rating:
                      type: integer
                    review:
                      type: string
              required:
              - rating
              - review
  "/api/v1/users/":
    post:
      summary: Register a new user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              examples:
                example_0:
                  value:
                    user:
                      id: 1
                      first_name: John
                      last_name: Doe
                      email: john.doe@example.com
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    error:
                      code: 422
                      message: Unprocessable Entity
                      fields:
                        first_name:
                        - First name cannot be blank
                        email:
                        - Email must be valid
                        - Email has already been taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                    password_confirmation:
                      type: string
                  required:
                  - first_name
                  - last_name
                  - email
                  - password
                  - password_confirmation
  "/api/v1/users/login":
    post:
      summary: create session
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      code: 200
                      message: Logged in sucessfully.
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              examples:
                example_0:
                  value:
                    status:
                      message: Invalid Email or password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
              required:
              - email
              - password
servers:
- url: "{defaultHost}"
  variables:
    defaultHost:
      default: http://localhost:3000
components:
  securitySchemes:
    authorization:
      type: http
      name: Authorization
      in: header
      scheme: bearer
security:
- authorization: []
